q()
install.packages("View")
install.packages("manipulate")
library("manipulate", lib.loc="C:/Program Files/R/R-3.2.0/library")
?View
install.packages("UsingR")
josh =c(1,2,3,4,5,6,7,8,9,10)
names(josh)=c('a','b');
josh
?sum
help(sum)
data.entry(josh)
fix(JOSH)
fix(josh)
i=1:10
i=c(1:10)
i
a=1;h=4;n=5
aa=a+h*(0:(n-1))
aa
i[1]
i[i>5]
which(i>5)
i>5
clear
i
x=c(10,20,30,40,50,60,70,80,90,100)
x[1]
which(x>50)
x[1,2]
x[C(1,2)]
x[C(2,3)]
x[2]
x[3]
x[c(2,3)]
x[C(2,3)]
x>50
x[x>50]
WD
wd
help
help workspace
wk
help()
getwd()
ls()
load('train.sea.30.Rdata')
ls()
summary(train.sea.30)
train.sea.30$growClass=droplevels(train.sea.30$growClass)
train.sea.30$growClass[train.sea.30$growRate > 0]='good'
train.sea.30$growClass[train.sea.30$growRate < 0]='bad'
train.sea.30$growClass=factor(train.sea.30$growClass)
train.sea.filter.30=train.sea.30[train.sea.30$YieldRate<50 & train.sea.30$PE<50 & train.sea.30$ROE>-50 & train.sea.30$ROE<100 & train.sea.30$MonthRate<100 & train.sea.30$MonthRate > -50 & train.sea.30$YearRate >-100 & train.sea.30$YearRate<100,]
summary(train.sea.30)
<<<<<<< HEAD
View(train.sea.30)
View(train.sea.30)
summary(train.sea.30)
View(train.sea.90)
summary(train.sea.30.attr)
summary(train.30)
summary(train.30.attr)
=======
summary(train.sea.filter.30)
library(rminer)
model=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='svm')
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
install.packages("C50")
library(C50)
data(churn)
str(churnTrain)
churnTrain = churnTrain[,! names(churnTrain) %in% c("state", "area_code", "account_length") ]
str(churnTrain)
set.seed(2)
ind <- sample(2, nrow(churnTrain), replace = TRUE, prob=c(0.7, 0.3))
ind
trainset = churnTrain[ind == 1,]
str(trainset)
str(train.sea.filter.30)
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
train.sea.filter.30[train.sea.30$growClass==na]
train.sea.filter.30[train.sea.30$growClass==NA]
is.na(train.sea.filter.30)
train.sea.filter.30[train.sea.30$growClass=='NA]
'
dd
train.sea.filter.30[train.sea.30$growClass=='NA']
model
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
model=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='rpart')
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
VariableImportance=Importance(model,train.sea.filter.30,method="sensa")
VariableImportance=Importance(model,train.sea.filter.30,method="sensr")
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
VariableImportance=Importance(model,train.sea.filter.30,method="sensa")
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(trainset),col="gray",Grid=10)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30,method="sensv")
model=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='svm')
VariableImportance=Importance(model,train.sea.filter.30,method="sensa")
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30,method="DS")
VariableImportance=Importance(model,train.sea.filter.30,method="DSA")
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
model=fit(growClass ~ YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='svm')
print(model)
model=fit(growClass ~ YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='rpart')
print(model)
plot(model)
plot(model, margin=0.)
plot(model, margin=0.1)
plot(model)
model
str(model)
model=fit(growClass ~ YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='ctree')
model
str(trainset)
new_train = trainset[,! names(churnTrain) %in% c("churn", "international_plan", "voice_mail_plan")]
str(new_train)
str(train.sea.filter.30)
str(train.sea.30)
summary(train.sea.30)
train.sea.30=train.sea.30[train.sea.30$YieldRate<50 & train.sea.30$PE<50 & train.sea.30$ROE>-50 & train.sea.30$ROE<100 & train.sea.30$MonthRate<100 & train.sea.30$MonthRate > -50 & train.sea.30$YearRate >-100 & train.sea.30$YearRate<100,]
train.sea.30$growClass=droplevels(train.sea.30$growClass)
train.sea.30$growClass[train.sea.30$growRate > 0]='good'
train.sea.30$growClass[train.sea.30$growRate < 0]='bad'
train.sea.30$growClass=factor(train.sea.30$growClass)
summary(train.sea.30)
new_train.sea.30=train.sea.30[,! names(train.sea.30) %in% c("StockId", "TimeId", "Diff","growRate","growClass")]
str(new_train.sea.30)
cor(new_train.sea.30)
library(caret)
highlyCorrelated = findCorrelation(cor_mat, cutoff=0.75)
cor_mat=cor(new_train.sea.30)
highlyCorrelated = findCorrelation(cor_mat, cutoff=0.75)
names(new_train)[highlyCorrelated]
highlyCorrelated
names(new_train.sea.30)[highlyCorrelated]
cor_mat=cor(new_train.sea.30)
cor_mat
model
plot(model)
VariableImportance=Importance(model,train.sea.filter.30,method="sens")
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
model=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='svm')
VariableImportance=Importance(model,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance
model=fit(growClass ~ YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='svm')
VariableImportance=Importance(model,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance
model_rpart=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='rpart')
model_ctree=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='ctree')
model_randFor=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='randomForest')
VariableImportance=Importance(model_rpart,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model_ctree,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model_randFor,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
model_knn=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='randomForest')
VariableImportance=Importance(model_knn,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model_ctree,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
model_boosting=fit(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,train.sea.filter.30,model='randomForest')
VariableImportance=Importance(model_boosting,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30)
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30,mothod='sensv')
VariableImportance=Importance(model,train.sea.filter.30,mothod='senv')
VariableImportance=Importance(model,train.sea.filter.30,method='senv')
VariableImportance=Importance(model,train.sea.filter.30,method='sensv')
VariableImportance=Importance(model,train.sea.filter.30,method='senv')
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30,method='sena')
L=list(runs=1,sen=t(VariableImportance$imp),sresponses=VariableImportance$sresponses)
mgraph(L,graph="IMP",leg=names(train.sea.filter.30),col="gray",Grid=10)
VariableImportance=Importance(model,train.sea.filter.30,method='MSA')
q()
save.image("C:\\Temp\\R.RData")
q()
>>>>>>> 0403a13f537d834996f0131364cb9dc8c313eb09
load("E:/GIT/threela/analysis/stockpredict/train180.Rdata")
summary(train.180)
train.180=train.180[train.180$YieldRate<50 & train.180$PE<50 & train.180$ROE>-50 & train.180$ROE<100 & train.180$MonthRate<100 & train.180$MonthRate > -50 & train.180$YearRate >-100 & train.180$YearRate<100,]
summary(train.180)
train.180[train.180$growRate > 600]
train.180[train.180$growRate > 600,]
train.180[train.180$growRate > 600,]
train.180=subset(train.180,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate,growRate))
summary(train.180)
cor_matrix=cor(train.180)
cor_matrix
?cor
cor_matrix=cor(train.180,method = c("pearson", "kendall", "spearman"))
cor_matrix
cor_matrix
load("E:/GIT/threela/analysis/stockpredict/train.sea.180.Rdata")
train.sea.180=train.sea.180[train.sea.180$YieldRate<50 & train.sea.180$PE<50 & train.sea.180$ROE>-50 & train.sea.180$ROE<100 & train.sea.180$MonthRate<100 & train.sea.180$MonthRate > -50 & train.sea.180$YearRate >-100 & train.sea.180$YearRate<100,]
train.sea.180=subset(train.sea.180,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate,growRate))
cor_matrix=cor(train.sea.180,method = c("pearson", "kendall", "spearman"))
summary(train.sea.180)
cor_matrix
cor_matrix
cor(train.sea.180,method = c("pearson"))
cor(train.sea.180,method = c("kendall"))
cor(train.sea.180,method = c("spearman"))
View(train.sea.30)
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.30.RData")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.90.RData")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.180.RData")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/train.sea.30.Rdata")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/train.sea.30.Rdata")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/train.sea.180.Rdata")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/train.sea.90.Rdata")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/vd.sea.30.Rdata")
train.sea.filter.180=train.sea.180[train.sea.180$YieldRate<50 & train.sea.180$PE<50 & train.sea.180$ROE>-50 & train.sea.180$ROE<100 & train.sea.180$MonthRate<100 & train.sea.180$MonthRate > -50 & train.sea.180$YearRate >-100 & train.sea.180$YearRate<100,]
#decrease growclass
train.sea.180$growClass=droplevels(train.sea.180$growClass)
train.sea.180$growClass[train.sea.180$growRate >= 0]='good'
train.sea.180$growClass[train.sea.180$growRate < 0]='bad'
train.sea.180$growClass=factor(train.sea.180$growClass)
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/vd_180.Rdata")
#validation data
vd.sea.180$growClass=droplevels(vd.sea.180$growClass)
vd.sea.180$growClass[vd.sea.180$growRate >= 0]='good'
vd.sea.180$growClass[vd.sea.180$growRate < 0]='bad'
vd.sea.180$growClass=factor(vd.sea.180$growClass)
vd.sea.180.attr=subset(vd.sea.180,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate))
vd.sea.180.class=vd.sea.180$growClass
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/vd.sea.180.Rdata")
#validation data
vd.sea.180$growClass=droplevels(vd.sea.180$growClass)
vd.sea.180$growClass[vd.sea.180$growRate >= 0]='good'
vd.sea.180$growClass[vd.sea.180$growRate < 0]='bad'
vd.sea.180$growClass=factor(vd.sea.180$growClass)
vd.sea.180.attr=subset(vd.sea.180,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate))
vd.sea.180.class=vd.sea.180$growClass
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.180.RData")
predict.sea.filter.180=predict(model.sea.filter.180,vd.sea.180.attr)
library("e1071", lib.loc="C:/Program Files/R/R-3.2.1/library")
predict.sea.filter.180.type.tune=predict(model.sea.filter.180.type.tune,vd.sea.180.attr)
confusionMatrix(table(predict.sea.filter.180.type.tune,vd.sea.180.class))
library("caret", lib.loc="C:/Program Files/R/R-3.2.1/library")
confusionMatrix(table(predict.sea.filter.180.type.tune,vd.sea.180.class))
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.90.RData")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.180.RData")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/vd.sea.90.Rdata")
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/vd.sea.30.Rdata")
#validation data
vd.sea.90$growClass=droplevels(vd.sea.90$growClass)
vd.sea.90$growClass[vd.sea.90$growRate >= 0]='good'
vd.sea.90$growClass[vd.sea.90$growRate < 0]='bad'
vd.sea.90$growClass=factor(vd.sea.90$growClass)
vd.sea.90.attr=subset(vd.sea.90,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate))
vd.sea.90.class=vd.sea.90$growClass
predict.sea.filter.90.type.tune=predict(model.sea.filter.90.type.tune,vd.sea.90.attr)
confusionMatrix(table(predict.sea.filter.90.type.tune,vd.sea.90.class))
#validation data
vd.sea.30$growClass=droplevels(vd.sea.30$growClass)
vd.sea.30$growClass[vd.sea.30$growRate >= 0]='good'
vd.sea.30$growClass[vd.sea.30$growRate < 0]='bad'
vd.sea.30$growClass=factor(vd.sea.30$growClass)
vd.sea.30.attr=subset(vd.sea.30,select=c(YieldRate,PE,PBR,EPS,DebtRatio,ROE,MonthRate,YearRate))
vd.sea.30.class=vd.sea.30$growClass
predict.sea.filter.30.type.tune=predict(model.sea.filter.30.type.tune,vd.sea.30.attr)
load("C:/Users/Joshua/Git/threela/analysis/stockpredict/svm.sea.30.RData")
predict.sea.filter.30.type.tune=predict(model.sea.filter.30.type.tune,vd.sea.30.attr)
confusionMatrix(table(predict.sea.filter.30.type.tune,vd.sea.30.class))
model.sea.filter.30.type.tune
rpart.train.sea.180=rpart(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,data=train.sea.filter.180)
plot(rpart.train.sea.180,margin=0.1)
text(rpart.train.sea.180,all=TRUE,use.n=TRUE)
library("rpart", lib.loc="C:/Program Files/R/R-3.2.1/library")
rpart.train.sea.180=rpart(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,data=train.sea.filter.180)
plot(rpart.train.sea.180,margin=0.1)
text(rpart.train.sea.180,all=TRUE,use.n=TRUE)
train.sea.180$growClass=droplevels(train.sea.180$growClass)
train.sea.180$growClass[train.sea.180$growRate >= 0]='good'
train.sea.180$growClass[train.sea.180$growRate < 0]='bad'
train.sea.180$growClass=factor(train.sea.180$growClass)
train.sea.filter.180=train.sea.180[train.sea.180$YieldRate<50 & train.sea.180$PE<50 & train.sea.180$ROE>-50 & train.sea.180$ROE<100 & train.sea.180$MonthRate<100 & train.sea.180$MonthRate > -50 & train.sea.180$YearRate >-100 & train.sea.180$YearRate<100,]
rpart.train.sea.180=rpart(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,data=train.sea.filter.180)
plot(rpart.train.sea.180,margin=0.1)
text(rpart.train.sea.180,all=TRUE,use.n=TRUE)
predict.rpart.sea.filter.180=predict(rpart.train.sea.180,vd.sea.180.attr,type='class')
confusionMatrix(table(predict.rpart.sea.filter.180,vd.sea.180.class))
library("ROCR", lib.loc="C:/Program Files/R/R-3.2.1/library")
##rocr
predict.rpart.sea.filter.180=predict(rpart.train.sea.180,vd.sea.180.attr,type='prob')
pred.to.roc=predict.rpart.sea.filter.180[,2]
pred.rocr <- prediction(pred.to.roc, vd.sea.180.class)
perf.tpr.rocr <- performance(pred.rocr,'tpr','fpr')
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(perf.rocr@y.values)))
predict.rpart.sea.filter.180=predict(rpart.train.sea.180,vd.sea.180.attr,type='prob')
pred.to.roc=predict.rpart.sea.filter.180[,2]
pred.rocr <- prediction(pred.to.roc, vd.sea.180.class)
perf.tpr.rocr <- performance(pred.rocr,'tpr','fpr')
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(perf.rocr@y.values)))
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(perd.rocr@y.values)))
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(prdd.rocr@y.values)))
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(pred.rocr@y.values)))
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(perf.tpr.rocr@y.values)))
library("party", lib.loc="C:/Program Files/R/R-3.2.1/library")
ctree.train.sea.180=ctree(growClass ~YieldRate+PE+PBR+EPS+DebtRatio+ROE+MonthRate+YearRate,data=train.sea.filter.180)
plot(ctree.train.sea.180)
predict.ctree.sea.filter.180=predict(ctree.train.sea.180,vd.sea.180.attr)
confusionMatrix(table(predict.ctree.sea.filter.180,vd.sea.180.class))
predict.ctree.sea.filter.180=predict(ctree.train.sea.180,vd.sea.180,type='prob')
pred.to.roc=unlist(predict.ctree.sea.filter.180)[even(1:length(unlist(predict.ctree.sea.filter.180)))]
pred.rocr <- prediction(pred.to.roc, vd.sea.180.class)
perf.tpr.rocr <- performance(pred.rocr,'tpr','fpr')
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(pred.rocr@y.values)))
odd <- function(x) x%%2 != 0
even <- function(x) x%%2 == 0
pred.to.roc=unlist(predict.ctree.sea.filter.180)[even(1:length(unlist(predict.ctree.sea.filter.180)))]
pred.rocr <- prediction(pred.to.roc, vd.sea.180.class)
perf.tpr.rocr <- performance(pred.rocr,'tpr','fpr')
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(pred.rocr@y.values)))
plot(perf.tpr.rocr, colorize=T,main=paste("AUC:",(perf.tpr.rocr@y.values)))
